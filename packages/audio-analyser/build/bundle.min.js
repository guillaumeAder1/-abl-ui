(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.AudioTool = factory());
}(this, (function () { 'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var _default = /*#__PURE__*/function () {
    function _default(source, fft, debug) {
      _classCallCheck(this, _default);

      if (!source) {
        throw Error('Source is not defined');
      }

      this.streamOn = false;
      this.debug = debug || false;
      this.createAnalyzer(source, fft);
    }

    _createClass(_default, [{
      key: "log",
      value: function log(msg) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'log';
        this.debug && console[type](msg);
      }
      /**
        * @param {HTML5 Audio Element} player - audio element playing the song
        * @param {Number} fft - frequency array size, min 32, max 2048
        * https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize
        */

    }, {
      key: "createAnalyzer",
      value: function createAnalyzer(player) {
        var fft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2048;

        try {
          var context = new (window.AudioContext || window.webkitAudioContext)();
          var source = context.createMediaElementSource(player);
          this.analyser = context.createAnalyser();
          this.analyser.fftSize = fft;
          source.connect(this.analyser);
          this.analyser.connect(context.destination);
          this.frequencies = new Uint8Array(this.analyser.frequencyBinCount); // this.log('analyser created');
        } catch (error) {
          var msg = 'Audio context not supported';
          this.log(msg, 'warn');
          throw msg;
        }
      }
      /**
        * @param {Function} fn - callback function to get frequency from instance
        */

    }, {
      key: "getFrequencies",
      value: function getFrequencies(fn) {
        this.log('get frequencies data');
        this.callback = fn;
        this.startStream();
      }
    }, {
      key: "startStream",
      value: function startStream() {
        this.log('start stream');
        this.streamOn = true;
        window.requestAnimationFrame(this.getStream.bind(this));
      }
    }, {
      key: "stopStream",
      value: function stopStream() {
        this.log('stopStream');
        this.streamOn = false;
      }
    }, {
      key: "getStream",
      value: function getStream() {
        this.log('call getStream');
        this.streamOn && window.requestAnimationFrame(this.getStream.bind(this));
        this.analyser.getByteFrequencyData(this.frequencies);
        return this.callback(this.frequencies);
      }
    }]);

    return _default;
  }();

  return _default;

})));
